//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file
//TODO this is super outdated, either fix it or remove the file








Syntax: <option> <path/to/file>
-o                              Outputs executable       [ Default file path: <source>.bin  ]
--output-syntax                 Outputs syntactic tree   [ Default file path: <source>.txt  ]
--output-semantic               Outputs semantic tree    [ Default file path: <source>.txt  ]
--output-1                      Outputs Layer 1          [ Default file path: <source>.txt  ]
--output-0                      Outputs Layer 0          [ Default file path: <source>.txt  ]
--output-glsl                   Outputs GLSL code        [ Default file path: <source>.comp ]
--output-cpp                    Outputs C++ code         [ Default file path: <source>.cpp  ]
--output-asm                    Outputs Assembly code    [ Default file path: <source>.asm  ]




Syntax: <option>
-O0                             No optimizations
-O1                             Equivalent to //TODO
-O2                             Equivalent to //TODO
-O3                             Equivalent to --o-rewrite --o-values
-Of                             Complete optimization. Includes standard modules and context dependant optimizations. Requires -f

--o-rewrite                     Rewrites inefficient functions
--o-values                      Replaces compile time expressions with literals or constants
--o-unused-functions            Removes unused functions
--o-unused-vvalues              Removes unused values




Syntax: <option>
-g0                             No debug informations
-g1                             Equivalent to //TODO
-g2                             Equivalent to //TODO
-g3                             Equivalent to //TODO

--g-//TODO




Syntax: <option>
//TODO PROB USELESS-f                              Full build. All the source files are preprocessed and compiled, including the core module and the standard modules
--max-iterations-optimization   Maximum number of iterations for compile time optimizations         [ Default value: 16777216 ]
--max-iterations-value          Maximum number of iterations for compile time expressions definition     [ Default value: 16777216 ]
--max-depth-optimization        Maximum function depth for compilt time optimizations               [ Default value: 16777216 ]
--max-depth-value               Maximum function depth for compile time expressions definition           [ Default value: 16777216 ]








.                ╭─                                                                                                 │
.                │ ╭───────────────╮╮╮ ╭───────────────╮╮╮               ╭───────────────╮╮╮ ╭───────────────╮╮╮    │    High level languages - Photon Engine
.                │ │  Engine .ubr  │││ │  Source .ubr  │││               │  Source .lux  │││ │  Engine .lux  │││    │
.                │ ╰───────┬───────╯╯╯ ╰──────┬─┬──────╯╯╯               ╰─────┬─┬─┬─────╯╯╯ ╰──────┬─┬──────╯╯╯    │
.                │         │                  │ ╰──────────────╮ ╭─────────────╯ │ │                │ │             │
.                │         │                  ├────────────────│─│───────────────╯ │                │ │             │
.                │         ├──────────────────│────────────────│─│─────────────────│────────────────╯ │             │
.                │      pc │               pc ╰╮               │ │            pc ╭─╯              pc ╭╯             │
.                │ ╭───────┴───────╮╮╮ ╭───────┴───────╮╮╮     │ │       ╭───────┴───────╮╮╮ ╭───────┴───────╮╮╮    │    Precompiled binaries
.                │ │ Engine .pcubr │││ │ Source .pcubr │││     │ │       │ Source .pclux │││ │ Engine .pclux │││    │
.                │ ╰───────┬───────╯╯╯ ╰───────┬───────╯╯╯     │ │       ╰──────┬─┬──────╯╯╯ ╰───────┬───────╯╯╯    │
.                │         ╰───────────────────┼───────────────┴─┴──────────────┴─│──────────────────╯              │
.   COMPILE TIME │                          pc │                              pc ╭╯                                 │
.                │                     ╭───────┴───────╮                 ╭───────┴───────╮╮╮                        │    Individual source file containing all the code
.                │                     │     .ubr      │                 │     .lux      │││                        │    One per module
.                │                     ╰───────┬───────╯                 ╰───────┬───────╯╯╯                        │
.                │     ╭───────────────────────┴─────────────────────────────────┴───────────────────────╮          │
.                │  pc │                                                                              pc │          │
.                │ ╭───┴───╮ ╭─────────────╮╮╮ ╭─────────────╮╮╮ ╭─────────────╮╮╮ ╭─────────────╮╮╮ ╭───┴───╮╮╮    │    Output languages
.                │ │ .cpp  │ │ Engine .hpp │││ │ Vulkan .hpp │││ │   C++ .hpp  │││ │ Engine .cpp │││ │ .comp │││    │    Inline GLSL and inline C++ blocks are pasted
.                │ ╰───┬───╯ ╰─────┬─┬─────╯╯╯ ╰─────┬─┬─────╯╯╯ ╰─────┬─┬─────╯╯╯ ╰──────┬──────╯╯╯ ╰───┬───╯╯╯    │
.                │     │           │ ╰───────────────│─┴───────────────│─┴────────────────┤ g++          │          │
.                │     ├───────────┴─────────────────┴─────────────────╯           ╭──────┴──────╮╮╮     │          │
.                │     │                                                           │  Engine .o  │││     │          │
.                │     │                                                           ╰──────┬──────╯╯╯     │          │
.                ╰─    ╰──┬───────────────────────────────────────────────────────────────╯              │          │
.                ╭─   g++ │                                                             glslangValidator │          │
.                │ ╭──────┴──────╮ ╭───────────────╮                               ╭───────────────╮ ╭───┴───╮╮╮    │    Output binaries
.                │ │     BIN     │ │    libc++     │                               │ Vulkan driver │ │ SPIRV │││    │    Used in runtime
.                │ ╰──────┬──────╯ ╰───────┬───────╯                               ╰───────┬───────╯ ╰───┬───╯╯╯    │
.                │        ╰────────────────┴─────────────────────┬─────────────────────────┴─────────────╯          │
.                │                                               │                                                  │
.                │                                               │                                                  │
.       RUNTIME  │                                               │                                                  │
.                │ ╭─────────────────────────────────────────────┴─────────────────────────────────────────────╮    │
.                │ │                                                                                           │    │
.                │ │                                        APPLICATION                                        │    │
.                │ │                                                                                           │    │
.                │ ╰───────────────────────────────────────────────────────────────────────────────────────────╯    │
.                ╰─                                                                                                 │




















  ___________________________________
 |          |                       |
 | priority | Unary                 |
 |__________|_______________________|
 |          |                       |
 |     1    | n++ n-- a[n]          |
 |     2    | ++n --n +n            |
 |     3    |                       |
 |     4    | m++ n--               |
 |     5    |                       |
 |     6    |                       |
 |     7    |                       |
 |     8    |                       |
 |     9    |                       |
 |    10    |                       |
 |    11    |                       |
 |    12    |                       |
 |    13    | ++n --n +n -n ~n !n   |
 |    14    |                       |
 |    15    |                       |
 |    16    |                       |
 |__________|_______________________|































//TODO remove enums





//TODO ???? meta keyword escaping





Extra layer

Adds:
    Abbreviated template syntax
    For-n statement
    For-range statement
    For-each statement


Descending:
    Abbreviated template syntax
        rewritten as a template declaration

    For-n statement
        rewritten as a for statement

    For-range statement
        rewritten as a for statement

    For-each statement
        rewritten as a for statement





──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────




Surface layer

Adds:
    For statement
    Match statement
    Once statement
    Defer statement


Descending:
    For statement
        rewritten as a while statement
        + 1 variable declaration
        + 1 experession statement

    Match statement
        rewritten as an if-else chain

    Once statement
        rewritten as an if statement
        + 1 variable declaration
        + 1 experession statement

    Defer statement
        rewritten as a stack push
        + 1 variable declaration (stack of Func)
        + 1 while loop before every return statement




──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────




Template layer


Adds:
    Struct template
    Function template
    Operator template


Descending:
    Struct template
        replaced with the generated struct declarations
    Function template
        replaced with the generated function declarations
    Operator template
        replaced with the generated operator declarations
//TODO name mangling in required in order to find the template calls



──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────




Namespace layer


Adds:
    Scope concept
    Namespace
    Operator
    Operator template


Descending:
    Operator declaration
        rewritten as a function declaration

    Operator template declaration
        rewritten as a funciton template declaration

    Scope, namespace
        removed though name mangling


Name mangling:
    Each elements starts with a letter
        a<n> = Alphanumeric identifier of n characters
        e<n> = prEfix  symbolic identifier of n characters
        t<n> = posTfix symbolic identifier of n characters
        n<n> = iNfix   symbolic identifier of n characters

    Symbolic identifiers are translated
        ! $ % & ( ) * + - / : < = > ? @ ^ ` | ~ ; { } [ ] .
        a b c d e f g h i j k l m n o p q r s t u v w x y z

    var += f<int>(2) + 54 % n;
    n2hm(a3var, n1h(a1f<a3int>(2), n1c(54, a1n)));

    idk.a.n = x ? a : ++Math.k.PI;
    n1m(a3idka1aa1n, n1on1(a1x, a1a, e2hh(a4Matha1ka2PI)));































quindi

- reference counter + pointer arithmetic con pointer da 16 byte
- 2 tipi per ogni struct automatici + function overload generati automaticamente

la dimensione e il padding delle cose non si può dare per scontato ma tanto non si usa praticamente mai. sizeof ovunque.

























.       │   ╭───────────────────╮             ╭───────────────────╮╮╮   │   Abstract representation of the syntactic elements
. -oy   │   │   Syntactic tree  │             │   Syntactic tree  │││   │
.       │   ╰───────────────────╯             ╰───────────────────╯╯╯   │
.       │          pc │                              pc │               │
.       │   ╭───────────────────╮             ╭───────────────────╮╮╮   │   Abstract representation of the program logic
. -oe   │   │   Semantic tree   │             │   Semantic tree   │││   │
.       │   ╰───────────────────╯             ╰───────────────────╯╯╯   │
.       │          pc │                              pc │               │
.       │   ╭───────────────────╮             ╭───────────────────╮╮╮   │   Removes templates, namespaces, tuples, typeof, aliases
. -o1   │   │      Layer 1      │             │      Layer 1      │││   │   Translates the names of symbols
.       │   ╰───────────────────╯             ╰───────────────────╯╯╯   │
.       │          pc │                              pc │               │
.       │   ╭───────────────────╮             ╭───────────────────╮╮╮   │   Removes typenames, enums, =:, !:, for loops, once, then, while-else, match
. -o0   │   │      Layer 0      │             │      Layer 0      │││   │
.       │   ╰───────────────────╯             ╰───────────────────╯╯╯   │



Preprocessing
    Conditionals evaluation
    File inclusion      +
    Macro expansion

Compilation
    Tokenization
    Syntax analysis
        Syntax tree creation
        Syntax errors output
    Semantic analysis
        Template instantiation
        Symbol tables creation
        Final symbol names assignment
        Symbol indexing
        Semantic tree creation
        Semantic errors output

    Const evaluation
        Code unwrapping
        Constness errors output
        Const optimizaion

    Static analysis
        Logical errors output

    Optimizations
        TODO

    Translation
        GLSL/C++ output
        SPIRV/binary output

    Language-specific optimizations
        TODO












*already declared* and *name conflict* are different